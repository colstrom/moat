#!/bin/sh

# The MIT License (MIT)
# Copyright (c) 2017 Chris Olstrom <chris@olstrom.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -o errexit

test ${DEBUGGING:-false} != false && set -o xtrace
PROGRAM_NAME=$(basename ${0})
VERBOSE=${VERBOSE:-false}
RELEASE_ORIGIN=${RELEASE_ORIGIN:-'https://raw.githubusercontent.com/colstrom/moat/develop/example'}

if test ${VERBOSE} != false
then
    printf "Using %s as release origin (set RELEASE_ORIGIN to change this)\n\n" ${RELEASE_ORIGIN} >&2
fi

abort() {
    exit ${1:-1};
}

usage() {
    printf "usage: %s %s\n" ${PROGRAM_NAME} "${*}"
}

get() {
    curl --silent --fail "${RELEASE_ORIGIN}/${1}"
}

releases() {
    get meta/release.list
}

lists() {
    if test ${#} -eq 0
    then
        usage 'lists <release>' >&2
        abort 100
    fi

    get meta/${1}/list.list
}

list() {
    if test ${#} -le 1
    then
        usage 'list <release> <type>' ; abort 100
    fi

    if ! lists ${1} | awk '{ print $1 }' | grep -q "^${2}$"
    then
        printf "%s has list of %s\n" ${1} ${2} >&2
        abort 111
    fi

    lists ${1} | awk "\$1 == \"${2}\" { print \$2 }" | while read -r list
    do
        get ${list}
    done
}

images() {
    if test ${#} -eq 0
    then
        usage 'images <release>' >&2
        abort 100
    fi

    list ${1} images | awk '{ print $1"/"$2":"$3 }'
}

downloads() {
    if test ${#} -eq 0
    then
        usage 'downloads <release>' >&2
        abort 100
    fi

    list ${1} downloads
}

script() {
    if test ${#} -eq 0
    then
        usage 'script <release>' >&2
        abort 100
    fi

    printf "#!/bin/sh\n\n"

    downloads ${1} | while read -r download
    do
        printf "curl --create-dirs --output %s %s\n" ${download} ${RELEASE_ORIGIN}/${download}
    done

    images ${1} | while read -r image
    do
        printf "docker pull %s\n" ${image}
    done
}

help() {
    cat <<-EOF
Mirror Operations Assistance Tool v1.0.0

usage: ${PROGRAM_NAME} <command>

Commands:

  -r | --releases               Print available releases
  -L | --lists <release>        Print available lists for <release>
  -l | --list <release> <type>  Print contents of <type> list for <release>
  -i | --images <release>       Print images for <release>
  -d | --downloads <release>    Print downloads for <release>
  -s | --script <release>       Print a simple script to mirror <release>

EOF
}

moat() {
    COMMAND=${1}
    shift
    case ${COMMAND} in
        r|releases|-r|--releases)
            releases;;
        L|lists|-L|--lists)
            lists "${@}";;
        l|list|-l|--list)
            list "${@}";;
        i|images|-i|--images)
            images "${@}";;
        d|downloads|-d|--downloads)
            downloads "${@}";;
        s|script|-s|--script)
            script "${@}";;
        h|help|-h|--help)
            help;;
        *)
            help >&2
            exit 1
            ;;
    esac
}

moat "${@:-}"
